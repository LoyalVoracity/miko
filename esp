#include <WiFi.h>
#include <WebServer.h>
#include <DHT.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define DHTPIN 32
#define DHTTYPE DHT22
const int maxSamples = 150;  // 5 Minuten bei 2 Sekunden Intervall

// OLED Konfiguration
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
#define OLED_SDA 26
#define OLED_SCL 27
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// WLAN-Zugangsdaten
const char* ssid = "AydemirFamilie";
const char* password = "MikailF82";

DHT dht(DHTPIN, DHTTYPE);
WebServer server(80);

float tempHistory[maxSamples];
float humHistory[maxSamples];
int sampleIndex = 0;
unsigned long startTime;

void handleRoot() {
  String html = R"rawliteral(
  <!DOCTYPE html><html><head>
  <meta charset="UTF-8">
  <title>DHT22 Sensor Live</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <meta http-equiv="refresh" content="1800">
  <style>
    body { font-family: sans-serif; text-align: center; padding: 20px; }
    canvas { max-width: 100%; height: auto; }
    .reading { font-size: 1.5em; font-weight: bold; margin-top: 20px; }
  </style>
  </head><body>
  <h1>DHT22 Sensor Live</h1>
  <canvas id="chart"></canvas>
  <div id="readings" class="reading"></div>
  <script>
    const ctx = document.getElementById('chart').getContext('2d');
    const chart = new Chart(ctx, {
      type: 'line',
      data: { 
        labels: [], 
        datasets: [
          { label: 'Temperatur (°C)', data: [], borderColor: 'red', fill: false },
          { label: 'Feuchtigkeit (%)', data: [], borderColor: 'blue', fill: false }
        ]
      },
      options: { scales: { y: { beginAtZero: true } } }
    });

    async function fetchData() {
      const res = await fetch('/data');
      const json = await res.json();
      chart.data.labels = json.labels;
      chart.data.datasets[0].data = json.temps;
      chart.data.datasets[1].data = json.hums;
      chart.update();
      document.getElementById("readings").innerHTML =
        `${json.currentTemp.toFixed(1)} °C<br>${json.currentHum.toFixed(1)} %`;
    }

    setInterval(fetchData, 2000);
    fetchData();
  </script>
  </body></html>
  )rawliteral";
  server.send(200, "text/html", html);
}

void handleData() {
  String json = "{";
  json += "\"labels\": [";
  for (int i = 0; i < maxSamples; i++) {
    json += String(i * 2);
    if (i < maxSamples - 1) json += ",";
  }
  json += "],\"temps\": [";
  for (int i = 0; i < maxSamples; i++) {
    json += String(tempHistory[(sampleIndex + i) % maxSamples], 1);
    if (i < maxSamples - 1) json += ",";
  }
  json += "],\"hums\": [";
  for (int i = 0; i < maxSamples; i++) {
    json += String(humHistory[(sampleIndex + i) % maxSamples], 1);
    if (i < maxSamples - 1) json += ",";
  }
  json += "],\"currentTemp\": " + String(tempHistory[(sampleIndex - 1 + maxSamples) % maxSamples], 1);
  json += ",\"currentHum\": " + String(humHistory[(sampleIndex - 1 + maxSamples) % maxSamples], 1);
  json += "}";
  server.send(200, "application/json", json);
}

void setup() {
  Serial.begin(115200);
  dht.begin();

  // OLED initialisieren
  Wire.begin(OLED_SDA, OLED_SCL);
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println("OLED nicht gefunden");
    while (true);
  }
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println("WLAN verbinden...");
  display.display();

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Verbinde...");
  }

  IPAddress ip = WiFi.localIP();
  Serial.print("Verbunden! IP-Adresse: ");
  Serial.println(ip);

  // OLED IP anzeigen (10 Sekunden)
  display.clearDisplay();
  display.setCursor(0, 0);
  display.println("Verbunden mit:");
  display.println(ssid);
  display.println("IP:");
  display.println(ip);
  display.println("");
  display.println("Web im LAN öffnen!");
  display.display();

  startTime = millis();

  server.on("/", handleRoot);
  server.on("/data", handleData);
  server.begin();
}

void loop() {
  server.handleClient();

  static unsigned long lastRead = 0;
  if (millis() - lastRead > 2000) {
    float h = dht.readHumidity();
    float t = dht.readTemperature();

    tempHistory[sampleIndex] = isnan(t) ? 0 : t;
    humHistory[sampleIndex] = isnan(h) ? 0 : h;
    sampleIndex = (sampleIndex + 1) % maxSamples;

    lastRead = millis();

    // Nach 10 Sekunden OLED auf Sensoranzeige umstellen
    if (millis() - startTime > 10000) {
      display.clearDisplay();
      display.setTextSize(2);
      display.setCursor(0, 0);
      display.print(t, 1);
      display.println(" C");
      display.print(h, 1);
      display.println(" %");
      display.display();
    }
  }
}